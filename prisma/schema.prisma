// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
  provider      = "prisma-client-js"
  seed          = "node seed.js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  profilePicture  Bytes?
  username        String            @unique
  email           String            @unique
  role            Role              @default(BASIC)
  bio             String?
  password        String
  favoriteShows   FavoriteShow[]
  reactOnReviews  ReactOnReview[]
  writtenReviews  Review[]          @relation("WrittenReviews")
  CommentOnReview CommentOnReview[]
  following       Follow[]          @relation("UserFollows")
  followers       Follow[]          @relation("UserFollowedBy")

  @@index([username])
}

model Follow {
  id          String @id @default(uuid())
  followingId String
  followerId  String
  followed    User   @relation(name: "UserFollows", fields: [followingId], references: [id], onDelete: Cascade)
  followedBy  User   @relation(name: "UserFollowedBy", fields: [followerId], references: [id], onDelete: Cascade)

  @@unique([followingId, followerId])
}

model Show {
  id            String         @id @default(uuid())
  title         String         @unique
  averageRating Float          @default(0)
  favoritedBy   FavoriteShow[]
  reviews       Review[]       @relation("ShowReviews")
}

model FavoriteShow {
  id        String   @id @default(uuid())
  userId    String
  showId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  show      Show     @relation(fields: [showId], references: [id], onDelete: Cascade)

  @@unique([userId, showId])
}

model ReactOnReview {
  id        String   @id @default(uuid())
  userId    String
  reviewId  String
  react     React    @default(LIKE)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
}

model Review {
  id              String            @id @default(uuid())
  text            String?
  rating          Float
  createdAt       DateTime          @default(now())
  user            User              @relation("WrittenReviews", fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  show            Show              @relation("ShowReviews", fields: [showId], references: [id], onDelete: Cascade)
  showId          String
  reactOnReviews  ReactOnReview[]
  CommentOnReview CommentOnReview[]

  @@unique([userId, showId])
}

model CommentOnReview {
  id        String   @id @default(uuid())
  userId    String
  reviewId  String
  text      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

enum Role {
  BASIC
  ADMIN
}

enum React {
  LIKE
  LOVE
  LAUGH
  WOW
  ANGRY
}
